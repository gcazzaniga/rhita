[directories]
# directory where the input data are stored
input_data = tests/input/climate_variables
;/Users/gcazzani/Desktop/Data_temp
;/Users/gcazzani/Library/CloudStorage/GoogleDrive-cazzanigagreta@gmail.com/Mon Drive/Post-doc/PowDev_project/HazardsTracking/Data/Precipitation_radar_2014/20140808
# directory where the shapefiles for creating the mask are stored
mask = None
# directory where the results will be stored
output = tests/output

# Define the algorithm settings:
[settings]
# parallel computing: 'True' or 'False'
parallel = True
# number of cpu to use for parallel computing
ncpu = 10

# Define the subsetting options:
[subsetting]
# If you want to apply a spatial subsetting set spatial_subset = True
spatial_subset = True
# Specify the method for spatial data subsetting: choose between subsetting by coordinates or by mask:
# spatial_subset_method can be 'coordinates' or 'shapefile' or 'netcdf'
spatial_subset_method = coordinates
# if spatial_subset_method = 'shapefile' or spatial_subset_method = 'netcdf' define the name of the mask file (.shp or .nc accordingly) or the netcdf file (zero values to be masked)
mask_file = None
#Europe_land_sea_mask_0_100.nc
# name of the variable in the netcdf file to be used as a mask
var_name_mask = None
# if you want to subset data by 'coordinates' define the latitude and longitude boundaries (minima and maxima)
lat_min = 45
lat_max = 50
lon_min = 7
lon_max = 9
# Specify the starting and ending date of the temporal subset using the format %%Y-%%M-%%DT%%H-%%M-%%S
start_date = 2022-08-05T00-00-00
end_date = 2022-08-25T23-00-00

# Explicit the structure of the netcdf file in input:
[data_structure]
# name of the variable for the longitude in the netcdf file
x_coordinate = lon
# name of the variable for the latitude in the netcdf file
y_coordinate = lat
# name of the variable for the longitude in the netcdf file of the threshold map
x_coordinate_map = lon
# name of the variable for the latitude in the netcdf file of the threshold map
y_coordinate_map = lat
# spatial resolution of the data (in degrees) in the netcdf file
spatial_resolution = 0.25
# unit of measure of the spatial resolution in the netcdf file
unit_spatial_resolution = degrees
# name of the variable for the time in the netcdf file
time = time
# if the date_format = False define the format of time in the netcdf file:  %%Y-%%m-%%d %%H:%%M:%%S,... 
time_format_input = %%Y-%%m-%%dT%%H:%%M:%%S.%%f
# if the date format also contains nanoseconds set nanosecond = True, otherwise nanosecond = False
nanoseconds = True
# time resolution of the data in the netcdf file: 5 min, 30 min, hour, 3 hours, 1 day, 1 month, 1 year
temporal_resolution = 1 day
# name of the main variable in the netcdf file: spei9[-], precipitation, tp, wind_speed, etc...
variable_name = tas
# name of the main variable in the netcdf file of the threshold map: spei9[-], precipitation, tp, wind_speed, etc...
variable_name_map = tas
; wind_speed, spei9[-], precipitation  
# unit of measurement of the data in the netcdf file
UoM = K
; m s-1, mm

# Define the parameters for the RHITA algorithm:
[methods_parameters]
# type of hazards to detect: 'drought', 'heavy_precipitation', 'cold_spell', 'heatwave', 'wind'
hazard_type = heatwave
;heavy_precipitation, wind, drought, heatwave, cold_spell
# 1. parameters for the binarization of the data based on threshold/s
# if the original data are already binarized and are used as they are (does not use the thresholding function) set compute_threshold = False otherwise set it to True
compute_threshold = False
# select the tail of the distribution to be used for the hazard selection: 'right' for values greater than the thresold or 'left' for values lower than the threshold
tail = right
# first threshold: 'fixed', 'quantile', 'map', 'map_time_of_year' 
threshold1 = fixed 
# if the threshold is given by a map (threshold1 = 'map'), define the path to the file (should be a netcdf file with the same dimensions of the input data)
map_path = None
# if the first threshold is defined by a fixed value (threshold1 = 'fixed'), define the threshold
fixed_th1 = 22
# if the first threshold is defined by the quantile (threshold1 = 'quantile'), define the probability level of the quantile
level_quantile_th1 = None
# second threshold: 'fixed', 'quantile', or 'None' if not used
# 2. parameters for the extraction of the events in space
# minimum size (in km2) of the event to be considered as a hazard, if 0 all events will be considered
min_event_size = 25000
# 17500
;10000
# distance threshold (in km) between two events to be considered as two different hazards (space)
distance_th_event2D = 50 
#150
# calculation of the events centroid: 'weighted' (where the weights are the values of the variable) or 'unweighted' (where the weights are equal to 1) 
method_centroid = unweighted    
# 2. parameters for tracking the events in time
# method for identifying the same event in consecutive timesteps: 'min_distance_centroids', 'min_distance_cells', 'overlapping_absolute_area', 'overlapping_relative_area'
method_event3D = min_distance_centroids
# distance threshold (in km) for the method 'min_distance_centroid' or 'min_distance_cells', can be empty if the method is not used (time)
distance_th_event3D = 250
# minimum percentage (in %) of overlapping area of event t(i) with respect t(i+1) or viceversa for the method 'overlapping_relative_area', can be empty if the method is not used
# (the method compare the highest percentage with the threshold)
perc_area_th = None
# minimum number of overlapping cells for the method 'overlapping_absolute_area', can be empty if the method is not used
n_cells_th = None
# minimum time period for the event to be defined as a hazard (in the unit of the temporal resolution)
min_duration = 2

# Define the output options:
[output_options]
# folder name where to store the results inside the specific hazard directory
folder_name_hazard = heatwave_test
# if you want to update the results already generated with the with another time period set update = True, otherwise set it to False
# if update = True, the code will read the existing results in the output directory and will update them with the new data, if same events are detected it will generate en error message
# in fact this means that you are not looking at a different time period 
update = False
# if you want to generate the catalogue of events (csv format) with the features identified for each 3D event set summary_catalogue = True, otherwise set it to False
catalogue = True
# if you want to generate a csv file for each 3D event, with detail for each time step event tracking set single_event_tracking = True
single_event_tracking = True
# if you want to save the values in time and space of the variable of interest, for each event set save_values = True
single_event3D = True
# set the format for the file just above, between 'zarr' and 'netcdf'
format_output = netcdf
# set the long and standard name of the variable for the zarr/netcdf file
long_name = 2m_temperature
standard_name = air_temperature